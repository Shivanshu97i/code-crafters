import { ChallengeType, Difficulty } from "@prisma/client";
import { type NextPage } from "next";
import Head from "next/head";
import { Uploader, type UploadWidgetConfig } from "uploader";
import { UploadDropzone, UploadButton } from "react-uploader";
import { useForm, type SubmitHandler } from "react-hook-form";
import { useState } from "react";
import { api } from "~/utils/api";
import { useRouter } from "next/router";

type FormValues = {
  title: string;
  type: ChallengeType;
  difficulty: Difficulty;
  description: string;
};

const NewChallengePage: NextPage = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<FormValues>();
  const [images, setImages] = useState<string[]>([]);
  const router = useRouter();
  const createChallenge = api.challenge.create.useMutation({
    onSuccess: () => {
      void router.push("/challenges");
    },
  });
  const onSubmit: SubmitHandler<FormValues> = (data) => {
    if (images.length === 0) return alert("Please upload at least one image");
    if (!data.title || !data.type || !data.difficulty || !data.description) {
      return alert("Please fill all the fields");
    }
    createChallenge.mutate({
      shortDesc: "shortDesc",
      difficulty: data.difficulty,
      imagesURL: images,
      briefDesc: data.description,
      title: data.title,
      type: data.type,
    });
  };
  return (
    <>
      <Head>
        <title>Create a new Challenge</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen flex-col py-12 ">
        <form
          onSubmit={(e) => {
            e.preventDefault();
            void handleSubmit(onSubmit)();
          }}
          className="mx-auto flex w-full max-w-3xl flex-col rounded-lg border bg-white p-6 shadow-sm"
        >
          <div className="flex flex-col space-x-2">
            <label className="label">
              <span className="label-text text-base font-medium">
                Challenge title *
              </span>
            </label>
            <input
              {...register("title", {
                required: "Challenge title is required",
              })}
              placeholder=""
              type="text"
              className={`input-bordered ${
                errors.title ? "input-error" : ""
              } input w-full`}
            />
            {errors.title?.type === "required" && (
              <label className="label">
                <span className="label-text-alt text-red-400">
                  {errors.title?.message}
                </span>
              </label>
            )}
          </div>
          <div className="flex flex-col space-x-2">
            <label className="label">
              <span className="label-text text-base font-medium">
                Challenge Type *
              </span>
            </label>
            <select {...register("type")} className="select-bordered select">
              {Object.values(ChallengeType).map((type, i) => (
                <option key={i} value={type}>
                  {type}
                </option>
              ))}
            </select>
          </div>
          <div className="flex flex-col space-x-2">
            <label className="label">
              <span className="label-text text-base font-medium">
                Difficulty *
              </span>
            </label>
            <select
              {...register("difficulty")}
              className="select-bordered select"
            >
              {Object.values(Difficulty).map((d, i) => (
                <option key={i} value={d}>
                  {d}
                </option>
              ))}
            </select>
            <label className="label">
              <span className="label-text-alt">Bottom Left label</span>
            </label>
          </div>
          <div className="flex flex-col space-x-2">
            <label className="label">
              <span className="label-text text-base font-medium">
                Challenge Images *
              </span>
            </label>
            <UploadDropzone
              uploader={uploader}
              options={uploaderOptions}
              onUpdate={(files) =>
                console.log(files.map((x) => x.fileUrl).join("\n"))
              }
              onComplete={(files) => setImages(files.map((x) => x.fileUrl))}
              width="700px"
              height="200px"
            />
          </div>
          <div className="flex flex-col space-x-2">
            <label className="label">
              <span className="label-text text-base font-medium">
                Challenge Videos (optional)
              </span>
            </label>
            <UploadButton
              uploader={uploader}
              options={{ multi: false, maxFileSizeBytes: /* 10MB */ 10485760 }}
              onComplete={(files) =>
                alert(files.map((x) => x.fileUrl).join("\n"))
              }
            >
              {({ onClick }) => (
                <button className="btn-ghost btn " onClick={onClick}>
                  Click here to upload Challenge Video
                </button>
              )}
            </UploadButton>
          </div>
          <div className="flex flex-col space-x-2">
            <label className="label">
              <span className="label-text text-base font-medium">
                Brief Description *
              </span>
            </label>
            <textarea
              {...register("description", {
                required: "Brief Description is required",
              })}
              className="textarea-bordered textarea h-24"
              placeholder="Description"
            />
            {errors.description?.type === "required" && (
              <label className="label">
                <span className="label-text-alt text-red-400">
                  {errors.description?.message}
                </span>
              </label>
            )}
          </div>
          <button
            type="submit"
            className="btn-primary btn mt-5
          "
          >
            Submit
          </button>
        </form>
      </main>
    </>
  );
};

const uploader = Uploader({ apiKey: "public_kW15b5n7D18wopW9BAmHcFSk6Ece" }); // Replace "free" with your API key.
const uploaderOptions: UploadWidgetConfig = {
  multi: true,

  // Comment out this line & use 'onUpdate' instead of
  // 'onComplete' to have the dropzone close after upload.
  showFinishButton: true,
  styles: {
    colors: {
      primary: "#377dff",
    },
  },
};

// const UploadZone = () => (
//   <UploadDropzone
//     uploader={uploader}
//     options={uploaderOptions}
//     onUpdate={(files) => console.log(files.map((x) => x.fileUrl).join("\n"))}
//     onComplete={(files) => alert(files.map((x) => x.fileUrl).join("\n"))}
//     width="700px"
//     height="200px"
//   />
// );

export default NewChallengePage;
