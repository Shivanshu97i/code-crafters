// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

generator erd {
    provider = "prisma-erd-generator"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String       @id @default(cuid())
    name             String?
    email            String?      @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    starred          Challenge[]  @relation("Starred")
    challenges       Challenge[]
    submissions      Submission[] @relation("Submissions")
    Comment          Comment[]
    likedSubmissions Submission[] @relation("LikedSubmissions")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Challenge {
    id         String        @id @default(cuid())
    title      String
    type       ChallengeType
    shortDesc  String
    briefDesc  String
    imagesURL  String[]
    videoURL   String
    user       User          @relation(fields: [userId], references: [id])
    userId     String
    stars      User[]        @relation("Starred")
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
    Submission Submission[]
}

model Submission {
    id           String    @id @default(cuid())
    title        String
    description  String?
    repoURL      String
    liveURL      String?
    user         User      @relation("Submissions", fields: [user_id], references: [id])
    user_id      String
    challenge    Challenge @relation(fields: [challenge_id], references: [id])
    challenge_id String
    comments     Comment[]
    likes        User[]    @relation("LikedSubmissions")
    tags         String[]
    createdAt    DateTime  @default(now())
    updatedAt    DateTime  @updatedAt
}

model Comment {
    id            String     @id @default(cuid())
    text          String
    submission    Submission @relation(fields: [submission_id], references: [id])
    submission_id String
    user          User       @relation(fields: [user_id], references: [id])
    user_id       String
    createdAt     DateTime   @default(now())
    updatedAt     DateTime   @updatedAt
}

enum ChallengeType {
    Frontend
    Backend
    Fullstack
    Mobile
    DevOps
    DataScience
    ML
    AI
    Blockchain
    CyberSecurity
    GameDev
    Other
}
